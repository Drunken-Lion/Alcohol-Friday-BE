plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

group = 'com.drunkenlion'
version = '0.0.1'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // databases
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    // Jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // JPA QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    // Jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3', 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // hypersistence-utils
    implementation group: 'io.hypersistence', name: 'hypersistence-utils-hibernate-63', version: '3.7.0'
    // hibernate-spatial
    implementation 'org.hibernate.orm:hibernate-spatial'
    //swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    // dev
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    // Aws Java Sdk S3
    // https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-s3
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.630'
    // MockMultipartFile
    implementation 'org.springframework:spring-test:6.1.2'
    // RestTemplate Configuration
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3.1'
    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple JSON 데이터를 파싱하고 생성
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // 테스트 종료 후 jacocoTestReport 생성
}

// jacoco Test Coverage
jacoco {
    toolVersion = "0.8.8"
    reportsDir = file("$buildDir/Jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }

    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') {
         Qdomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [] + Qdomains)
                })
        )
    }

    dependsOn test // test 성공해야 jacocoTestReport 실행
    finalizedBy 'jacocoTestCoverageVerification' // jacocoTestReport 실행 후 CoverageVerification 실행
}

jacocoTestCoverageVerification {
    def Qdomains = []
    for (qPattern in '*.QA'..'*.QZ') {
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS' // 커버리지 체크 기준 (BUNDLE(default), PACKAGE, CLASS, SOURCEFILE, METHOD)
            excludes = ['*.jwt.*', '*.global.*'] + Qdomains
            limit {
                counter = 'BRANCH' // 커버리지 측정 기준 (line, branch, method, class, instruction(default), complexity)
                value = 'COVEREDRATIO'
//                minimum = 0.50
            }
        }
    }
}
